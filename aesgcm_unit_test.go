package aesgcm_test

import (
	"aesgcm"
	"fmt"
	"runtime/debug"
	"testing"
)

func assertEqualsString(t *testing.T, expected string, actual string, message interface{}) {
	if expected != actual {
		t.Error(fmt.Sprintf("Expected %v,  Got %v --> %v", expected, actual, message))
		t.Logf(string(debug.Stack()))
	}
}

//Test encryption of exactly single block - test case 3
func Test_NewAESGCM_Encrypt1(t *testing.T) {
	var key = []byte{0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08}
	var instance = aesgcm.NewAESGCM(key, [3]uint32{0xcafebabe, 0xfacedbad, 0xdecaf888})
	var dst, nonce, plaintext, additionalData = []byte{0}, []byte{0}, []byte{0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a}, []byte{0}
	var res = instance.Seal(dst, nonce, plaintext, additionalData)
	var r1 = fmt.Sprintf("%x", res)
	assertEqualsString(t, "42831ec2217774244b7221b784d0d49c", r1, "Bad block1")
}

//Test encryption of exactly two blocks - test case 3
func Test_NewAESGCM_Encrypt2(t *testing.T) {
	var key = []byte{0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08}
	var instance = aesgcm.NewAESGCM(key, [3]uint32{0xcafebabe, 0xfacedbad, 0xdecaf888})
	var dst, nonce, plaintext, additionalData = []byte{0}, []byte{0},
		[]byte{0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72}, []byte{0}
	var res = instance.Seal(dst, nonce, plaintext, additionalData)
	var r1 = fmt.Sprintf("%x", res)
	assertEqualsString(t, "42831ec2217774244b7221b784d0d49ce3aa212f2c02a4e035c17e2329aca12e", r1, "Bad block2")
}

//Test encryption of exactly four blocks - test case 3
func Test_NewAESGCM_Encrypt4(t *testing.T) {
	var key = []byte{0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08}
	var instance = aesgcm.NewAESGCM(key, [3]uint32{0xcafebabe, 0xfacedbad, 0xdecaf888})
	var dst, nonce, plaintext = []byte{0}, []byte{0},
		[]byte{0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
			0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55}
	var additionalData []byte
	var res = instance.Seal(dst, nonce, plaintext, additionalData)
	var r1 = fmt.Sprintf("%x", res)
	assertEqualsString(t, "42831ec2217774244b7221b784d0d49ce3aa212f2c02a4e035c17e2329aca12e21d514b25466931c7d8f6a5aac84aa051ba30b396a0aac973d58e091473f5985", r1, "Bad block4")
}

//Test encryption of three blocks plus a fraction - derived from test case 3
func Test_NewAESGCM_Encrypt38(t *testing.T) {
	var key = []byte{0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08}
	var instance = aesgcm.NewAESGCM(key, [3]uint32{0xcafebabe, 0xfacedbad, 0xdecaf888})
	var dst, nonce, plaintext, additionalData = []byte{0}, []byte{0},
		[]byte{0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
			0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39}, []byte{0}
	var res = instance.Seal(dst, nonce, plaintext, additionalData)
	var r1 = fmt.Sprintf("%x", res)
	assertEqualsString(t, "42831ec2217774244b7221b784d0d49ce3aa212f2c02a4e035c17e2329aca12e21d514b25466931c7d8f6a5aac84aa051ba30b396a0aac973d58e091", r1, "Bad block3.8")
}
